Grammar:

Rule 0     S' -> start
Rule 1     start -> block start
Rule 2     start -> block
Rule 3     block -> { next_statements }
Rule 4     block -> statement
Rule 5     next_statements -> statement next_statements
Rule 6     next_statements -> statement
Rule 7     statement -> flow_control_statement
Rule 8     statement -> action_statement ;
Rule 9     action_statement -> BREAK
Rule 10    action_statement -> CONTINUE
Rule 11    action_statement -> RETURN expr
Rule 12    action_statement -> PRINT values
Rule 13    action_statement -> id_expr DASSIGN expr
Rule 14    action_statement -> id_expr TASSIGN expr
Rule 15    action_statement -> id_expr MASSIGN expr
Rule 16    action_statement -> id_expr PASSIGN expr
Rule 17    action_statement -> id_expr = expr
Rule 18    indexes -> INT , indexes
Rule 19    indexes -> INT
Rule 20    values -> expr , values
Rule 21    values -> expr
Rule 22    flow_control_statement -> FOR ID = range block
Rule 23    flow_control_statement -> WHILE expr block
Rule 24    flow_control_statement -> IF expr block ELSE block  [precedence=nonassoc, level=2]
Rule 25    flow_control_statement -> IF expr block  [precedence=nonassoc, level=1]
Rule 26    expr -> EYE ( expr )
Rule 27    expr -> ONES ( expr )
Rule 28    expr -> ZEROS ( expr )
Rule 29    expr -> [ outerlist ]
Rule 30    expr -> id_expr
Rule 31    expr -> STRING
Rule 32    expr -> FLOAT
Rule 33    expr -> INT
Rule 34    expr -> expr '  [precedence=right, level=6]
Rule 35    expr -> ( expr )
Rule 36    expr -> expr NEQ expr  [precedence=nonassoc, level=3]
Rule 37    expr -> expr EQ expr  [precedence=nonassoc, level=3]
Rule 38    expr -> expr GEQ expr  [precedence=nonassoc, level=3]
Rule 39    expr -> expr > expr  [precedence=nonassoc, level=3]
Rule 40    expr -> expr LEQ expr  [precedence=nonassoc, level=3]
Rule 41    expr -> expr < expr  [precedence=nonassoc, level=3]
Rule 42    expr -> ' expr  [precedence=right, level=6]
Rule 43    expr -> - expr  [precedence=right, level=6]
Rule 44    expr -> expr MDIVIDE expr  [precedence=left, level=5]
Rule 45    expr -> expr MTIMES expr  [precedence=left, level=5]
Rule 46    expr -> expr MMINUS expr  [precedence=left, level=4]
Rule 47    expr -> expr MPLUS expr  [precedence=left, level=4]
Rule 48    expr -> expr / expr  [precedence=left, level=5]
Rule 49    expr -> expr * expr  [precedence=left, level=5]
Rule 50    expr -> expr - expr  [precedence=left, level=4]
Rule 51    expr -> expr + expr  [precedence=left, level=4]
Rule 52    range -> expr : expr
Rule 53    id_expr -> ID [ indexes ]
Rule 54    id_expr -> ID
Rule 55    outerlist -> [ values ] , outerlist
Rule 56    outerlist -> [ values ]

Terminals, with rules where they appear:

'                    : 34 42
(                    : 26 27 28 35
)                    : 26 27 28 35
*                    : 49
+                    : 51
,                    : 18 20 55
-                    : 43 50
/                    : 48
:                    : 52
;                    : 8
<                    : 41
=                    : 17 22
>                    : 39
BREAK                : 9
CONTINUE             : 10
DASSIGN              : 13
ELSE                 : 24
EQ                   : 37
EYE                  : 26
FLOAT                : 32
FOR                  : 22
GEQ                  : 38
ID                   : 22 53 54
IF                   : 24 25
INT                  : 18 19 33
LEQ                  : 40
MASSIGN              : 15
MDIVIDE              : 44
MMINUS               : 46
MPLUS                : 47
MTIMES               : 45
NEQ                  : 36
ONES                 : 27
PASSIGN              : 16
PRINT                : 12
RETURN               : 11
STRING               : 31
TASSIGN              : 14
WHILE                : 23
ZEROS                : 28
[                    : 29 53 55 56
]                    : 29 53 55 56
error                : 
{                    : 3
}                    : 3

Nonterminals, with rules where they appear:

action_statement     : 8
block                : 1 2 22 23 24 24 25
expr                 : 11 13 14 15 16 17 20 21 23 24 25 26 27 28 34 35 36 36 37 37 38 38 39 39 40 40 41 41 42 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52
flow_control_statement : 7
id_expr              : 13 14 15 16 17 30
indexes              : 18 53
next_statements      : 3 5
outerlist            : 29 55
range                : 22
start                : 1 0
statement            : 4 5 6
values               : 12 20 55 56


state 0

    (0) S' -> . start
    (1) start -> . block start
    (2) start -> . block
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    start                          shift and go to state 1
    block                          shift and go to state 2
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 1

    (0) S' -> start .


state 2

    (1) start -> block . start
    (2) start -> block .
    (1) start -> . block start
    (2) start -> . block
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    $end            reduce using rule 2 (start -> block .)
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    block                          shift and go to state 2
    start                          shift and go to state 16
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 3

    (3) block -> { . next_statements }
    (5) next_statements -> . statement next_statements
    (6) next_statements -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    next_statements                shift and go to state 17
    statement                      shift and go to state 18
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 4

    (4) block -> statement .
    {               reduce using rule 4 (block -> statement .)
    FOR             reduce using rule 4 (block -> statement .)
    WHILE           reduce using rule 4 (block -> statement .)
    IF              reduce using rule 4 (block -> statement .)
    BREAK           reduce using rule 4 (block -> statement .)
    CONTINUE        reduce using rule 4 (block -> statement .)
    RETURN          reduce using rule 4 (block -> statement .)
    PRINT           reduce using rule 4 (block -> statement .)
    ID              reduce using rule 4 (block -> statement .)
    $end            reduce using rule 4 (block -> statement .)
    }               reduce using rule 4 (block -> statement .)
    ELSE            reduce using rule 4 (block -> statement .)


state 5

    (7) statement -> flow_control_statement .
    {               reduce using rule 7 (statement -> flow_control_statement .)
    FOR             reduce using rule 7 (statement -> flow_control_statement .)
    WHILE           reduce using rule 7 (statement -> flow_control_statement .)
    IF              reduce using rule 7 (statement -> flow_control_statement .)
    BREAK           reduce using rule 7 (statement -> flow_control_statement .)
    CONTINUE        reduce using rule 7 (statement -> flow_control_statement .)
    RETURN          reduce using rule 7 (statement -> flow_control_statement .)
    PRINT           reduce using rule 7 (statement -> flow_control_statement .)
    ID              reduce using rule 7 (statement -> flow_control_statement .)
    $end            reduce using rule 7 (statement -> flow_control_statement .)
    }               reduce using rule 7 (statement -> flow_control_statement .)
    ELSE            reduce using rule 7 (statement -> flow_control_statement .)


state 6

    (8) statement -> action_statement . ;
    ;               shift and go to state 19


state 7

    (22) flow_control_statement -> FOR . ID = range block
    ID              shift and go to state 20


state 8

    (53) id_expr -> ID . [ indexes ]
    (54) id_expr -> ID .
    [               shift and go to state 21
    DASSIGN         reduce using rule 54 (id_expr -> ID .)
    TASSIGN         reduce using rule 54 (id_expr -> ID .)
    MASSIGN         reduce using rule 54 (id_expr -> ID .)
    PASSIGN         reduce using rule 54 (id_expr -> ID .)
    =               reduce using rule 54 (id_expr -> ID .)
    '               reduce using rule 54 (id_expr -> ID .)
    NEQ             reduce using rule 54 (id_expr -> ID .)
    EQ              reduce using rule 54 (id_expr -> ID .)
    GEQ             reduce using rule 54 (id_expr -> ID .)
    >               reduce using rule 54 (id_expr -> ID .)
    LEQ             reduce using rule 54 (id_expr -> ID .)
    <               reduce using rule 54 (id_expr -> ID .)
    MDIVIDE         reduce using rule 54 (id_expr -> ID .)
    MTIMES          reduce using rule 54 (id_expr -> ID .)
    MMINUS          reduce using rule 54 (id_expr -> ID .)
    MPLUS           reduce using rule 54 (id_expr -> ID .)
    /               reduce using rule 54 (id_expr -> ID .)
    *               reduce using rule 54 (id_expr -> ID .)
    -               reduce using rule 54 (id_expr -> ID .)
    +               reduce using rule 54 (id_expr -> ID .)
    {               reduce using rule 54 (id_expr -> ID .)
    FOR             reduce using rule 54 (id_expr -> ID .)
    WHILE           reduce using rule 54 (id_expr -> ID .)
    IF              reduce using rule 54 (id_expr -> ID .)
    BREAK           reduce using rule 54 (id_expr -> ID .)
    CONTINUE        reduce using rule 54 (id_expr -> ID .)
    RETURN          reduce using rule 54 (id_expr -> ID .)
    PRINT           reduce using rule 54 (id_expr -> ID .)
    ID              reduce using rule 54 (id_expr -> ID .)
    ;               reduce using rule 54 (id_expr -> ID .)
    ,               reduce using rule 54 (id_expr -> ID .)
    )               reduce using rule 54 (id_expr -> ID .)
    :               reduce using rule 54 (id_expr -> ID .)
    ]               reduce using rule 54 (id_expr -> ID .)


state 9

    (23) flow_control_statement -> WHILE . expr block
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 22
    id_expr                        shift and go to state 28

state 10

    (24) flow_control_statement -> IF . expr block ELSE block
    (25) flow_control_statement -> IF . expr block
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 34
    id_expr                        shift and go to state 28

state 11

    (9) action_statement -> BREAK .
    ;               reduce using rule 9 (action_statement -> BREAK .)


state 12

    (10) action_statement -> CONTINUE .
    ;               reduce using rule 10 (action_statement -> CONTINUE .)


state 13

    (11) action_statement -> RETURN . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 35
    id_expr                        shift and go to state 28

state 14

    (12) action_statement -> PRINT . values
    (20) values -> . expr , values
    (21) values -> . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    values                         shift and go to state 36
    expr                           shift and go to state 37
    id_expr                        shift and go to state 28

state 15

    (13) action_statement -> id_expr . DASSIGN expr
    (14) action_statement -> id_expr . TASSIGN expr
    (15) action_statement -> id_expr . MASSIGN expr
    (16) action_statement -> id_expr . PASSIGN expr
    (17) action_statement -> id_expr . = expr
    DASSIGN         shift and go to state 38
    TASSIGN         shift and go to state 39
    MASSIGN         shift and go to state 40
    PASSIGN         shift and go to state 41
    =               shift and go to state 42


state 16

    (1) start -> block start .
    $end            reduce using rule 1 (start -> block start .)


state 17

    (3) block -> { next_statements . }
    }               shift and go to state 43


state 18

    (5) next_statements -> statement . next_statements
    (6) next_statements -> statement .
    (5) next_statements -> . statement next_statements
    (6) next_statements -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    }               reduce using rule 6 (next_statements -> statement .)
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    statement                      shift and go to state 18
    next_statements                shift and go to state 44
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 19

    (8) statement -> action_statement ; .
    {               reduce using rule 8 (statement -> action_statement ; .)
    FOR             reduce using rule 8 (statement -> action_statement ; .)
    WHILE           reduce using rule 8 (statement -> action_statement ; .)
    IF              reduce using rule 8 (statement -> action_statement ; .)
    BREAK           reduce using rule 8 (statement -> action_statement ; .)
    CONTINUE        reduce using rule 8 (statement -> action_statement ; .)
    RETURN          reduce using rule 8 (statement -> action_statement ; .)
    PRINT           reduce using rule 8 (statement -> action_statement ; .)
    ID              reduce using rule 8 (statement -> action_statement ; .)
    $end            reduce using rule 8 (statement -> action_statement ; .)
    }               reduce using rule 8 (statement -> action_statement ; .)
    ELSE            reduce using rule 8 (statement -> action_statement ; .)


state 20

    (22) flow_control_statement -> FOR ID . = range block
    =               shift and go to state 45


state 21

    (53) id_expr -> ID [ . indexes ]
    (18) indexes -> . INT , indexes
    (19) indexes -> . INT
    INT             shift and go to state 47

    indexes                        shift and go to state 46

state 22

    (23) flow_control_statement -> WHILE expr . block
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    block                          shift and go to state 48
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 23

    (26) expr -> EYE . ( expr )
    (               shift and go to state 64


state 24

    (35) expr -> ( . expr )
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 65
    id_expr                        shift and go to state 28

state 25

    (27) expr -> ONES . ( expr )
    (               shift and go to state 66


state 26

    (28) expr -> ZEROS . ( expr )
    (               shift and go to state 67


state 27

    (29) expr -> [ . outerlist ]
    (55) outerlist -> . [ values ] , outerlist
    (56) outerlist -> . [ values ]
    [               shift and go to state 68

    outerlist                      shift and go to state 69

state 28

    (30) expr -> id_expr .
    '               reduce using rule 30 (expr -> id_expr .)
    NEQ             reduce using rule 30 (expr -> id_expr .)
    EQ              reduce using rule 30 (expr -> id_expr .)
    GEQ             reduce using rule 30 (expr -> id_expr .)
    >               reduce using rule 30 (expr -> id_expr .)
    LEQ             reduce using rule 30 (expr -> id_expr .)
    <               reduce using rule 30 (expr -> id_expr .)
    MDIVIDE         reduce using rule 30 (expr -> id_expr .)
    MTIMES          reduce using rule 30 (expr -> id_expr .)
    MMINUS          reduce using rule 30 (expr -> id_expr .)
    MPLUS           reduce using rule 30 (expr -> id_expr .)
    /               reduce using rule 30 (expr -> id_expr .)
    *               reduce using rule 30 (expr -> id_expr .)
    -               reduce using rule 30 (expr -> id_expr .)
    +               reduce using rule 30 (expr -> id_expr .)
    {               reduce using rule 30 (expr -> id_expr .)
    FOR             reduce using rule 30 (expr -> id_expr .)
    WHILE           reduce using rule 30 (expr -> id_expr .)
    IF              reduce using rule 30 (expr -> id_expr .)
    BREAK           reduce using rule 30 (expr -> id_expr .)
    CONTINUE        reduce using rule 30 (expr -> id_expr .)
    RETURN          reduce using rule 30 (expr -> id_expr .)
    PRINT           reduce using rule 30 (expr -> id_expr .)
    ID              reduce using rule 30 (expr -> id_expr .)
    ;               reduce using rule 30 (expr -> id_expr .)
    ,               reduce using rule 30 (expr -> id_expr .)
    )               reduce using rule 30 (expr -> id_expr .)
    :               reduce using rule 30 (expr -> id_expr .)
    ]               reduce using rule 30 (expr -> id_expr .)


state 29

    (31) expr -> STRING .
    '               reduce using rule 31 (expr -> STRING .)
    NEQ             reduce using rule 31 (expr -> STRING .)
    EQ              reduce using rule 31 (expr -> STRING .)
    GEQ             reduce using rule 31 (expr -> STRING .)
    >               reduce using rule 31 (expr -> STRING .)
    LEQ             reduce using rule 31 (expr -> STRING .)
    <               reduce using rule 31 (expr -> STRING .)
    MDIVIDE         reduce using rule 31 (expr -> STRING .)
    MTIMES          reduce using rule 31 (expr -> STRING .)
    MMINUS          reduce using rule 31 (expr -> STRING .)
    MPLUS           reduce using rule 31 (expr -> STRING .)
    /               reduce using rule 31 (expr -> STRING .)
    *               reduce using rule 31 (expr -> STRING .)
    -               reduce using rule 31 (expr -> STRING .)
    +               reduce using rule 31 (expr -> STRING .)
    {               reduce using rule 31 (expr -> STRING .)
    FOR             reduce using rule 31 (expr -> STRING .)
    WHILE           reduce using rule 31 (expr -> STRING .)
    IF              reduce using rule 31 (expr -> STRING .)
    BREAK           reduce using rule 31 (expr -> STRING .)
    CONTINUE        reduce using rule 31 (expr -> STRING .)
    RETURN          reduce using rule 31 (expr -> STRING .)
    PRINT           reduce using rule 31 (expr -> STRING .)
    ID              reduce using rule 31 (expr -> STRING .)
    ;               reduce using rule 31 (expr -> STRING .)
    ,               reduce using rule 31 (expr -> STRING .)
    )               reduce using rule 31 (expr -> STRING .)
    :               reduce using rule 31 (expr -> STRING .)
    ]               reduce using rule 31 (expr -> STRING .)


state 30

    (32) expr -> FLOAT .
    '               reduce using rule 32 (expr -> FLOAT .)
    NEQ             reduce using rule 32 (expr -> FLOAT .)
    EQ              reduce using rule 32 (expr -> FLOAT .)
    GEQ             reduce using rule 32 (expr -> FLOAT .)
    >               reduce using rule 32 (expr -> FLOAT .)
    LEQ             reduce using rule 32 (expr -> FLOAT .)
    <               reduce using rule 32 (expr -> FLOAT .)
    MDIVIDE         reduce using rule 32 (expr -> FLOAT .)
    MTIMES          reduce using rule 32 (expr -> FLOAT .)
    MMINUS          reduce using rule 32 (expr -> FLOAT .)
    MPLUS           reduce using rule 32 (expr -> FLOAT .)
    /               reduce using rule 32 (expr -> FLOAT .)
    *               reduce using rule 32 (expr -> FLOAT .)
    -               reduce using rule 32 (expr -> FLOAT .)
    +               reduce using rule 32 (expr -> FLOAT .)
    {               reduce using rule 32 (expr -> FLOAT .)
    FOR             reduce using rule 32 (expr -> FLOAT .)
    WHILE           reduce using rule 32 (expr -> FLOAT .)
    IF              reduce using rule 32 (expr -> FLOAT .)
    BREAK           reduce using rule 32 (expr -> FLOAT .)
    CONTINUE        reduce using rule 32 (expr -> FLOAT .)
    RETURN          reduce using rule 32 (expr -> FLOAT .)
    PRINT           reduce using rule 32 (expr -> FLOAT .)
    ID              reduce using rule 32 (expr -> FLOAT .)
    ;               reduce using rule 32 (expr -> FLOAT .)
    ,               reduce using rule 32 (expr -> FLOAT .)
    )               reduce using rule 32 (expr -> FLOAT .)
    :               reduce using rule 32 (expr -> FLOAT .)
    ]               reduce using rule 32 (expr -> FLOAT .)


state 31

    (33) expr -> INT .
    '               reduce using rule 33 (expr -> INT .)
    NEQ             reduce using rule 33 (expr -> INT .)
    EQ              reduce using rule 33 (expr -> INT .)
    GEQ             reduce using rule 33 (expr -> INT .)
    >               reduce using rule 33 (expr -> INT .)
    LEQ             reduce using rule 33 (expr -> INT .)
    <               reduce using rule 33 (expr -> INT .)
    MDIVIDE         reduce using rule 33 (expr -> INT .)
    MTIMES          reduce using rule 33 (expr -> INT .)
    MMINUS          reduce using rule 33 (expr -> INT .)
    MPLUS           reduce using rule 33 (expr -> INT .)
    /               reduce using rule 33 (expr -> INT .)
    *               reduce using rule 33 (expr -> INT .)
    -               reduce using rule 33 (expr -> INT .)
    +               reduce using rule 33 (expr -> INT .)
    {               reduce using rule 33 (expr -> INT .)
    FOR             reduce using rule 33 (expr -> INT .)
    WHILE           reduce using rule 33 (expr -> INT .)
    IF              reduce using rule 33 (expr -> INT .)
    BREAK           reduce using rule 33 (expr -> INT .)
    CONTINUE        reduce using rule 33 (expr -> INT .)
    RETURN          reduce using rule 33 (expr -> INT .)
    PRINT           reduce using rule 33 (expr -> INT .)
    ID              reduce using rule 33 (expr -> INT .)
    ;               reduce using rule 33 (expr -> INT .)
    ,               reduce using rule 33 (expr -> INT .)
    )               reduce using rule 33 (expr -> INT .)
    :               reduce using rule 33 (expr -> INT .)
    ]               reduce using rule 33 (expr -> INT .)


state 32

    (42) expr -> ' . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 70
    id_expr                        shift and go to state 28

state 33

    (43) expr -> - . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 71
    id_expr                        shift and go to state 28

state 34

    (24) flow_control_statement -> IF expr . block ELSE block
    (25) flow_control_statement -> IF expr . block
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    block                          shift and go to state 72
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 35

    (11) action_statement -> RETURN expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 11 (action_statement -> RETURN expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 36

    (12) action_statement -> PRINT values .
    ;               reduce using rule 12 (action_statement -> PRINT values .)


state 37

    (20) values -> expr . , values
    (21) values -> expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ,               shift and go to state 73
    ;               reduce using rule 21 (values -> expr .)
    ]               reduce using rule 21 (values -> expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 38

    (13) action_statement -> id_expr DASSIGN . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    id_expr                        shift and go to state 28
    expr                           shift and go to state 74

state 39

    (14) action_statement -> id_expr TASSIGN . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    id_expr                        shift and go to state 28
    expr                           shift and go to state 75

state 40

    (15) action_statement -> id_expr MASSIGN . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    id_expr                        shift and go to state 28
    expr                           shift and go to state 76

state 41

    (16) action_statement -> id_expr PASSIGN . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    id_expr                        shift and go to state 28
    expr                           shift and go to state 77

state 42

    (17) action_statement -> id_expr = . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    id_expr                        shift and go to state 28
    expr                           shift and go to state 78

state 43

    (3) block -> { next_statements } .
    {               reduce using rule 3 (block -> { next_statements } .)
    FOR             reduce using rule 3 (block -> { next_statements } .)
    WHILE           reduce using rule 3 (block -> { next_statements } .)
    IF              reduce using rule 3 (block -> { next_statements } .)
    BREAK           reduce using rule 3 (block -> { next_statements } .)
    CONTINUE        reduce using rule 3 (block -> { next_statements } .)
    RETURN          reduce using rule 3 (block -> { next_statements } .)
    PRINT           reduce using rule 3 (block -> { next_statements } .)
    ID              reduce using rule 3 (block -> { next_statements } .)
    $end            reduce using rule 3 (block -> { next_statements } .)
    }               reduce using rule 3 (block -> { next_statements } .)
    ELSE            reduce using rule 3 (block -> { next_statements } .)


state 44

    (5) next_statements -> statement next_statements .
    }               reduce using rule 5 (next_statements -> statement next_statements .)


state 45

    (22) flow_control_statement -> FOR ID = . range block
    (52) range -> . expr : expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    range                          shift and go to state 79
    expr                           shift and go to state 80
    id_expr                        shift and go to state 28

state 46

    (53) id_expr -> ID [ indexes . ]
    ]               shift and go to state 81


state 47

    (18) indexes -> INT . , indexes
    (19) indexes -> INT .
    ,               shift and go to state 82
    ]               reduce using rule 19 (indexes -> INT .)


state 48

    (23) flow_control_statement -> WHILE expr block .
    {               reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    FOR             reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    WHILE           reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    IF              reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    BREAK           reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    CONTINUE        reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    RETURN          reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    PRINT           reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    ID              reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    $end            reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    }               reduce using rule 23 (flow_control_statement -> WHILE expr block .)
    ELSE            reduce using rule 23 (flow_control_statement -> WHILE expr block .)


state 49

    (34) expr -> expr ' .
    '               reduce using rule 34 (expr -> expr ' .)
    NEQ             reduce using rule 34 (expr -> expr ' .)
    EQ              reduce using rule 34 (expr -> expr ' .)
    GEQ             reduce using rule 34 (expr -> expr ' .)
    >               reduce using rule 34 (expr -> expr ' .)
    LEQ             reduce using rule 34 (expr -> expr ' .)
    <               reduce using rule 34 (expr -> expr ' .)
    MDIVIDE         reduce using rule 34 (expr -> expr ' .)
    MTIMES          reduce using rule 34 (expr -> expr ' .)
    MMINUS          reduce using rule 34 (expr -> expr ' .)
    MPLUS           reduce using rule 34 (expr -> expr ' .)
    /               reduce using rule 34 (expr -> expr ' .)
    *               reduce using rule 34 (expr -> expr ' .)
    -               reduce using rule 34 (expr -> expr ' .)
    +               reduce using rule 34 (expr -> expr ' .)
    {               reduce using rule 34 (expr -> expr ' .)
    FOR             reduce using rule 34 (expr -> expr ' .)
    WHILE           reduce using rule 34 (expr -> expr ' .)
    IF              reduce using rule 34 (expr -> expr ' .)
    BREAK           reduce using rule 34 (expr -> expr ' .)
    CONTINUE        reduce using rule 34 (expr -> expr ' .)
    RETURN          reduce using rule 34 (expr -> expr ' .)
    PRINT           reduce using rule 34 (expr -> expr ' .)
    ID              reduce using rule 34 (expr -> expr ' .)
    ;               reduce using rule 34 (expr -> expr ' .)
    ,               reduce using rule 34 (expr -> expr ' .)
    )               reduce using rule 34 (expr -> expr ' .)
    :               reduce using rule 34 (expr -> expr ' .)
    ]               reduce using rule 34 (expr -> expr ' .)


state 50

    (36) expr -> expr NEQ . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 83
    id_expr                        shift and go to state 28

state 51

    (37) expr -> expr EQ . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 84
    id_expr                        shift and go to state 28

state 52

    (38) expr -> expr GEQ . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 85
    id_expr                        shift and go to state 28

state 53

    (39) expr -> expr > . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 86
    id_expr                        shift and go to state 28

state 54

    (40) expr -> expr LEQ . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 87
    id_expr                        shift and go to state 28

state 55

    (41) expr -> expr < . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 88
    id_expr                        shift and go to state 28

state 56

    (44) expr -> expr MDIVIDE . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 89
    id_expr                        shift and go to state 28

state 57

    (45) expr -> expr MTIMES . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 90
    id_expr                        shift and go to state 28

state 58

    (46) expr -> expr MMINUS . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 91
    id_expr                        shift and go to state 28

state 59

    (47) expr -> expr MPLUS . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 92
    id_expr                        shift and go to state 28

state 60

    (48) expr -> expr / . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 93
    id_expr                        shift and go to state 28

state 61

    (49) expr -> expr * . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 94
    id_expr                        shift and go to state 28

state 62

    (50) expr -> expr - . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 95
    id_expr                        shift and go to state 28

state 63

    (51) expr -> expr + . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 96
    id_expr                        shift and go to state 28

state 64

    (26) expr -> EYE ( . expr )
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 97
    id_expr                        shift and go to state 28

state 65

    (35) expr -> ( expr . )
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    )               shift and go to state 98
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 66

    (27) expr -> ONES ( . expr )
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 99
    id_expr                        shift and go to state 28

state 67

    (28) expr -> ZEROS ( . expr )
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 100
    id_expr                        shift and go to state 28

state 68

    (55) outerlist -> [ . values ] , outerlist
    (56) outerlist -> [ . values ]
    (20) values -> . expr , values
    (21) values -> . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    values                         shift and go to state 101
    expr                           shift and go to state 37
    id_expr                        shift and go to state 28

state 69

    (29) expr -> [ outerlist . ]
    ]               shift and go to state 102


state 70

    (42) expr -> ' expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 42 (expr -> ' expr .)
    EQ              reduce using rule 42 (expr -> ' expr .)
    GEQ             reduce using rule 42 (expr -> ' expr .)
    >               reduce using rule 42 (expr -> ' expr .)
    LEQ             reduce using rule 42 (expr -> ' expr .)
    <               reduce using rule 42 (expr -> ' expr .)
    MDIVIDE         reduce using rule 42 (expr -> ' expr .)
    MTIMES          reduce using rule 42 (expr -> ' expr .)
    MMINUS          reduce using rule 42 (expr -> ' expr .)
    MPLUS           reduce using rule 42 (expr -> ' expr .)
    /               reduce using rule 42 (expr -> ' expr .)
    *               reduce using rule 42 (expr -> ' expr .)
    -               reduce using rule 42 (expr -> ' expr .)
    +               reduce using rule 42 (expr -> ' expr .)
    {               reduce using rule 42 (expr -> ' expr .)
    FOR             reduce using rule 42 (expr -> ' expr .)
    WHILE           reduce using rule 42 (expr -> ' expr .)
    IF              reduce using rule 42 (expr -> ' expr .)
    BREAK           reduce using rule 42 (expr -> ' expr .)
    CONTINUE        reduce using rule 42 (expr -> ' expr .)
    RETURN          reduce using rule 42 (expr -> ' expr .)
    PRINT           reduce using rule 42 (expr -> ' expr .)
    ID              reduce using rule 42 (expr -> ' expr .)
    ;               reduce using rule 42 (expr -> ' expr .)
    ,               reduce using rule 42 (expr -> ' expr .)
    )               reduce using rule 42 (expr -> ' expr .)
    :               reduce using rule 42 (expr -> ' expr .)
    ]               reduce using rule 42 (expr -> ' expr .)
    '               shift and go to state 49


state 71

    (43) expr -> - expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 43 (expr -> - expr .)
    EQ              reduce using rule 43 (expr -> - expr .)
    GEQ             reduce using rule 43 (expr -> - expr .)
    >               reduce using rule 43 (expr -> - expr .)
    LEQ             reduce using rule 43 (expr -> - expr .)
    <               reduce using rule 43 (expr -> - expr .)
    MDIVIDE         reduce using rule 43 (expr -> - expr .)
    MTIMES          reduce using rule 43 (expr -> - expr .)
    MMINUS          reduce using rule 43 (expr -> - expr .)
    MPLUS           reduce using rule 43 (expr -> - expr .)
    /               reduce using rule 43 (expr -> - expr .)
    *               reduce using rule 43 (expr -> - expr .)
    -               reduce using rule 43 (expr -> - expr .)
    +               reduce using rule 43 (expr -> - expr .)
    {               reduce using rule 43 (expr -> - expr .)
    FOR             reduce using rule 43 (expr -> - expr .)
    WHILE           reduce using rule 43 (expr -> - expr .)
    IF              reduce using rule 43 (expr -> - expr .)
    BREAK           reduce using rule 43 (expr -> - expr .)
    CONTINUE        reduce using rule 43 (expr -> - expr .)
    RETURN          reduce using rule 43 (expr -> - expr .)
    PRINT           reduce using rule 43 (expr -> - expr .)
    ID              reduce using rule 43 (expr -> - expr .)
    ;               reduce using rule 43 (expr -> - expr .)
    ,               reduce using rule 43 (expr -> - expr .)
    )               reduce using rule 43 (expr -> - expr .)
    :               reduce using rule 43 (expr -> - expr .)
    ]               reduce using rule 43 (expr -> - expr .)
    '               shift and go to state 49


state 72

    (24) flow_control_statement -> IF expr block . ELSE block
    (25) flow_control_statement -> IF expr block .
    ELSE            shift and go to state 103
    {               reduce using rule 25 (flow_control_statement -> IF expr block .)
    FOR             reduce using rule 25 (flow_control_statement -> IF expr block .)
    WHILE           reduce using rule 25 (flow_control_statement -> IF expr block .)
    IF              reduce using rule 25 (flow_control_statement -> IF expr block .)
    BREAK           reduce using rule 25 (flow_control_statement -> IF expr block .)
    CONTINUE        reduce using rule 25 (flow_control_statement -> IF expr block .)
    RETURN          reduce using rule 25 (flow_control_statement -> IF expr block .)
    PRINT           reduce using rule 25 (flow_control_statement -> IF expr block .)
    ID              reduce using rule 25 (flow_control_statement -> IF expr block .)
    $end            reduce using rule 25 (flow_control_statement -> IF expr block .)
    }               reduce using rule 25 (flow_control_statement -> IF expr block .)


state 73

    (20) values -> expr , . values
    (20) values -> . expr , values
    (21) values -> . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 37
    values                         shift and go to state 104
    id_expr                        shift and go to state 28

state 74

    (13) action_statement -> id_expr DASSIGN expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 13 (action_statement -> id_expr DASSIGN expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 75

    (14) action_statement -> id_expr TASSIGN expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 14 (action_statement -> id_expr TASSIGN expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 76

    (15) action_statement -> id_expr MASSIGN expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 15 (action_statement -> id_expr MASSIGN expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 77

    (16) action_statement -> id_expr PASSIGN expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 16 (action_statement -> id_expr PASSIGN expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 78

    (17) action_statement -> id_expr = expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    ;               reduce using rule 17 (action_statement -> id_expr = expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 79

    (22) flow_control_statement -> FOR ID = range . block
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    block                          shift and go to state 105
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 80

    (52) range -> expr . : expr
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    :               shift and go to state 106
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 81

    (53) id_expr -> ID [ indexes ] .
    DASSIGN         reduce using rule 53 (id_expr -> ID [ indexes ] .)
    TASSIGN         reduce using rule 53 (id_expr -> ID [ indexes ] .)
    MASSIGN         reduce using rule 53 (id_expr -> ID [ indexes ] .)
    PASSIGN         reduce using rule 53 (id_expr -> ID [ indexes ] .)
    =               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    '               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    NEQ             reduce using rule 53 (id_expr -> ID [ indexes ] .)
    EQ              reduce using rule 53 (id_expr -> ID [ indexes ] .)
    GEQ             reduce using rule 53 (id_expr -> ID [ indexes ] .)
    >               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    LEQ             reduce using rule 53 (id_expr -> ID [ indexes ] .)
    <               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    MDIVIDE         reduce using rule 53 (id_expr -> ID [ indexes ] .)
    MTIMES          reduce using rule 53 (id_expr -> ID [ indexes ] .)
    MMINUS          reduce using rule 53 (id_expr -> ID [ indexes ] .)
    MPLUS           reduce using rule 53 (id_expr -> ID [ indexes ] .)
    /               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    *               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    -               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    +               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    {               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    FOR             reduce using rule 53 (id_expr -> ID [ indexes ] .)
    WHILE           reduce using rule 53 (id_expr -> ID [ indexes ] .)
    IF              reduce using rule 53 (id_expr -> ID [ indexes ] .)
    BREAK           reduce using rule 53 (id_expr -> ID [ indexes ] .)
    CONTINUE        reduce using rule 53 (id_expr -> ID [ indexes ] .)
    RETURN          reduce using rule 53 (id_expr -> ID [ indexes ] .)
    PRINT           reduce using rule 53 (id_expr -> ID [ indexes ] .)
    ID              reduce using rule 53 (id_expr -> ID [ indexes ] .)
    ;               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    ,               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    )               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    :               reduce using rule 53 (id_expr -> ID [ indexes ] .)
    ]               reduce using rule 53 (id_expr -> ID [ indexes ] .)


state 82

    (18) indexes -> INT , . indexes
    (18) indexes -> . INT , indexes
    (19) indexes -> . INT
    INT             shift and go to state 47

    indexes                        shift and go to state 107

state 83

    (36) expr -> expr NEQ expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 36 (expr -> expr NEQ expr .)
    EQ              reduce using rule 36 (expr -> expr NEQ expr .)
    GEQ             reduce using rule 36 (expr -> expr NEQ expr .)
    >               reduce using rule 36 (expr -> expr NEQ expr .)
    LEQ             reduce using rule 36 (expr -> expr NEQ expr .)
    <               reduce using rule 36 (expr -> expr NEQ expr .)
    {               reduce using rule 36 (expr -> expr NEQ expr .)
    FOR             reduce using rule 36 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 36 (expr -> expr NEQ expr .)
    IF              reduce using rule 36 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 36 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 36 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 36 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 36 (expr -> expr NEQ expr .)
    ID              reduce using rule 36 (expr -> expr NEQ expr .)
    ;               reduce using rule 36 (expr -> expr NEQ expr .)
    ,               reduce using rule 36 (expr -> expr NEQ expr .)
    )               reduce using rule 36 (expr -> expr NEQ expr .)
    :               reduce using rule 36 (expr -> expr NEQ expr .)
    ]               reduce using rule 36 (expr -> expr NEQ expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 84

    (37) expr -> expr EQ expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 37 (expr -> expr EQ expr .)
    EQ              reduce using rule 37 (expr -> expr EQ expr .)
    GEQ             reduce using rule 37 (expr -> expr EQ expr .)
    >               reduce using rule 37 (expr -> expr EQ expr .)
    LEQ             reduce using rule 37 (expr -> expr EQ expr .)
    <               reduce using rule 37 (expr -> expr EQ expr .)
    {               reduce using rule 37 (expr -> expr EQ expr .)
    FOR             reduce using rule 37 (expr -> expr EQ expr .)
    WHILE           reduce using rule 37 (expr -> expr EQ expr .)
    IF              reduce using rule 37 (expr -> expr EQ expr .)
    BREAK           reduce using rule 37 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 37 (expr -> expr EQ expr .)
    RETURN          reduce using rule 37 (expr -> expr EQ expr .)
    PRINT           reduce using rule 37 (expr -> expr EQ expr .)
    ID              reduce using rule 37 (expr -> expr EQ expr .)
    ;               reduce using rule 37 (expr -> expr EQ expr .)
    ,               reduce using rule 37 (expr -> expr EQ expr .)
    )               reduce using rule 37 (expr -> expr EQ expr .)
    :               reduce using rule 37 (expr -> expr EQ expr .)
    ]               reduce using rule 37 (expr -> expr EQ expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 85

    (38) expr -> expr GEQ expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 38 (expr -> expr GEQ expr .)
    EQ              reduce using rule 38 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 38 (expr -> expr GEQ expr .)
    >               reduce using rule 38 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 38 (expr -> expr GEQ expr .)
    <               reduce using rule 38 (expr -> expr GEQ expr .)
    {               reduce using rule 38 (expr -> expr GEQ expr .)
    FOR             reduce using rule 38 (expr -> expr GEQ expr .)
    WHILE           reduce using rule 38 (expr -> expr GEQ expr .)
    IF              reduce using rule 38 (expr -> expr GEQ expr .)
    BREAK           reduce using rule 38 (expr -> expr GEQ expr .)
    CONTINUE        reduce using rule 38 (expr -> expr GEQ expr .)
    RETURN          reduce using rule 38 (expr -> expr GEQ expr .)
    PRINT           reduce using rule 38 (expr -> expr GEQ expr .)
    ID              reduce using rule 38 (expr -> expr GEQ expr .)
    ;               reduce using rule 38 (expr -> expr GEQ expr .)
    ,               reduce using rule 38 (expr -> expr GEQ expr .)
    )               reduce using rule 38 (expr -> expr GEQ expr .)
    :               reduce using rule 38 (expr -> expr GEQ expr .)
    ]               reduce using rule 38 (expr -> expr GEQ expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 86

    (39) expr -> expr > expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 39 (expr -> expr > expr .)
    EQ              reduce using rule 39 (expr -> expr > expr .)
    GEQ             reduce using rule 39 (expr -> expr > expr .)
    >               reduce using rule 39 (expr -> expr > expr .)
    LEQ             reduce using rule 39 (expr -> expr > expr .)
    <               reduce using rule 39 (expr -> expr > expr .)
    {               reduce using rule 39 (expr -> expr > expr .)
    FOR             reduce using rule 39 (expr -> expr > expr .)
    WHILE           reduce using rule 39 (expr -> expr > expr .)
    IF              reduce using rule 39 (expr -> expr > expr .)
    BREAK           reduce using rule 39 (expr -> expr > expr .)
    CONTINUE        reduce using rule 39 (expr -> expr > expr .)
    RETURN          reduce using rule 39 (expr -> expr > expr .)
    PRINT           reduce using rule 39 (expr -> expr > expr .)
    ID              reduce using rule 39 (expr -> expr > expr .)
    ;               reduce using rule 39 (expr -> expr > expr .)
    ,               reduce using rule 39 (expr -> expr > expr .)
    )               reduce using rule 39 (expr -> expr > expr .)
    :               reduce using rule 39 (expr -> expr > expr .)
    ]               reduce using rule 39 (expr -> expr > expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 87

    (40) expr -> expr LEQ expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 40 (expr -> expr LEQ expr .)
    EQ              reduce using rule 40 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 40 (expr -> expr LEQ expr .)
    >               reduce using rule 40 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 40 (expr -> expr LEQ expr .)
    <               reduce using rule 40 (expr -> expr LEQ expr .)
    {               reduce using rule 40 (expr -> expr LEQ expr .)
    FOR             reduce using rule 40 (expr -> expr LEQ expr .)
    WHILE           reduce using rule 40 (expr -> expr LEQ expr .)
    IF              reduce using rule 40 (expr -> expr LEQ expr .)
    BREAK           reduce using rule 40 (expr -> expr LEQ expr .)
    CONTINUE        reduce using rule 40 (expr -> expr LEQ expr .)
    RETURN          reduce using rule 40 (expr -> expr LEQ expr .)
    PRINT           reduce using rule 40 (expr -> expr LEQ expr .)
    ID              reduce using rule 40 (expr -> expr LEQ expr .)
    ;               reduce using rule 40 (expr -> expr LEQ expr .)
    ,               reduce using rule 40 (expr -> expr LEQ expr .)
    )               reduce using rule 40 (expr -> expr LEQ expr .)
    :               reduce using rule 40 (expr -> expr LEQ expr .)
    ]               reduce using rule 40 (expr -> expr LEQ expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 88

    (41) expr -> expr < expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 41 (expr -> expr < expr .)
    EQ              reduce using rule 41 (expr -> expr < expr .)
    GEQ             reduce using rule 41 (expr -> expr < expr .)
    >               reduce using rule 41 (expr -> expr < expr .)
    LEQ             reduce using rule 41 (expr -> expr < expr .)
    <               reduce using rule 41 (expr -> expr < expr .)
    {               reduce using rule 41 (expr -> expr < expr .)
    FOR             reduce using rule 41 (expr -> expr < expr .)
    WHILE           reduce using rule 41 (expr -> expr < expr .)
    IF              reduce using rule 41 (expr -> expr < expr .)
    BREAK           reduce using rule 41 (expr -> expr < expr .)
    CONTINUE        reduce using rule 41 (expr -> expr < expr .)
    RETURN          reduce using rule 41 (expr -> expr < expr .)
    PRINT           reduce using rule 41 (expr -> expr < expr .)
    ID              reduce using rule 41 (expr -> expr < expr .)
    ;               reduce using rule 41 (expr -> expr < expr .)
    ,               reduce using rule 41 (expr -> expr < expr .)
    )               reduce using rule 41 (expr -> expr < expr .)
    :               reduce using rule 41 (expr -> expr < expr .)
    ]               reduce using rule 41 (expr -> expr < expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 89

    (44) expr -> expr MDIVIDE expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 44 (expr -> expr MDIVIDE expr .)
    EQ              reduce using rule 44 (expr -> expr MDIVIDE expr .)
    GEQ             reduce using rule 44 (expr -> expr MDIVIDE expr .)
    >               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    LEQ             reduce using rule 44 (expr -> expr MDIVIDE expr .)
    <               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    MDIVIDE         reduce using rule 44 (expr -> expr MDIVIDE expr .)
    MTIMES          reduce using rule 44 (expr -> expr MDIVIDE expr .)
    MMINUS          reduce using rule 44 (expr -> expr MDIVIDE expr .)
    MPLUS           reduce using rule 44 (expr -> expr MDIVIDE expr .)
    /               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    *               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    -               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    +               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    {               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    FOR             reduce using rule 44 (expr -> expr MDIVIDE expr .)
    WHILE           reduce using rule 44 (expr -> expr MDIVIDE expr .)
    IF              reduce using rule 44 (expr -> expr MDIVIDE expr .)
    BREAK           reduce using rule 44 (expr -> expr MDIVIDE expr .)
    CONTINUE        reduce using rule 44 (expr -> expr MDIVIDE expr .)
    RETURN          reduce using rule 44 (expr -> expr MDIVIDE expr .)
    PRINT           reduce using rule 44 (expr -> expr MDIVIDE expr .)
    ID              reduce using rule 44 (expr -> expr MDIVIDE expr .)
    ;               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    ,               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    )               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    :               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    ]               reduce using rule 44 (expr -> expr MDIVIDE expr .)
    '               shift and go to state 49


state 90

    (45) expr -> expr MTIMES expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 45 (expr -> expr MTIMES expr .)
    EQ              reduce using rule 45 (expr -> expr MTIMES expr .)
    GEQ             reduce using rule 45 (expr -> expr MTIMES expr .)
    >               reduce using rule 45 (expr -> expr MTIMES expr .)
    LEQ             reduce using rule 45 (expr -> expr MTIMES expr .)
    <               reduce using rule 45 (expr -> expr MTIMES expr .)
    MDIVIDE         reduce using rule 45 (expr -> expr MTIMES expr .)
    MTIMES          reduce using rule 45 (expr -> expr MTIMES expr .)
    MMINUS          reduce using rule 45 (expr -> expr MTIMES expr .)
    MPLUS           reduce using rule 45 (expr -> expr MTIMES expr .)
    /               reduce using rule 45 (expr -> expr MTIMES expr .)
    *               reduce using rule 45 (expr -> expr MTIMES expr .)
    -               reduce using rule 45 (expr -> expr MTIMES expr .)
    +               reduce using rule 45 (expr -> expr MTIMES expr .)
    {               reduce using rule 45 (expr -> expr MTIMES expr .)
    FOR             reduce using rule 45 (expr -> expr MTIMES expr .)
    WHILE           reduce using rule 45 (expr -> expr MTIMES expr .)
    IF              reduce using rule 45 (expr -> expr MTIMES expr .)
    BREAK           reduce using rule 45 (expr -> expr MTIMES expr .)
    CONTINUE        reduce using rule 45 (expr -> expr MTIMES expr .)
    RETURN          reduce using rule 45 (expr -> expr MTIMES expr .)
    PRINT           reduce using rule 45 (expr -> expr MTIMES expr .)
    ID              reduce using rule 45 (expr -> expr MTIMES expr .)
    ;               reduce using rule 45 (expr -> expr MTIMES expr .)
    ,               reduce using rule 45 (expr -> expr MTIMES expr .)
    )               reduce using rule 45 (expr -> expr MTIMES expr .)
    :               reduce using rule 45 (expr -> expr MTIMES expr .)
    ]               reduce using rule 45 (expr -> expr MTIMES expr .)
    '               shift and go to state 49


state 91

    (46) expr -> expr MMINUS expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 46 (expr -> expr MMINUS expr .)
    EQ              reduce using rule 46 (expr -> expr MMINUS expr .)
    GEQ             reduce using rule 46 (expr -> expr MMINUS expr .)
    >               reduce using rule 46 (expr -> expr MMINUS expr .)
    LEQ             reduce using rule 46 (expr -> expr MMINUS expr .)
    <               reduce using rule 46 (expr -> expr MMINUS expr .)
    MMINUS          reduce using rule 46 (expr -> expr MMINUS expr .)
    MPLUS           reduce using rule 46 (expr -> expr MMINUS expr .)
    -               reduce using rule 46 (expr -> expr MMINUS expr .)
    +               reduce using rule 46 (expr -> expr MMINUS expr .)
    {               reduce using rule 46 (expr -> expr MMINUS expr .)
    FOR             reduce using rule 46 (expr -> expr MMINUS expr .)
    WHILE           reduce using rule 46 (expr -> expr MMINUS expr .)
    IF              reduce using rule 46 (expr -> expr MMINUS expr .)
    BREAK           reduce using rule 46 (expr -> expr MMINUS expr .)
    CONTINUE        reduce using rule 46 (expr -> expr MMINUS expr .)
    RETURN          reduce using rule 46 (expr -> expr MMINUS expr .)
    PRINT           reduce using rule 46 (expr -> expr MMINUS expr .)
    ID              reduce using rule 46 (expr -> expr MMINUS expr .)
    ;               reduce using rule 46 (expr -> expr MMINUS expr .)
    ,               reduce using rule 46 (expr -> expr MMINUS expr .)
    )               reduce using rule 46 (expr -> expr MMINUS expr .)
    :               reduce using rule 46 (expr -> expr MMINUS expr .)
    ]               reduce using rule 46 (expr -> expr MMINUS expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    /               shift and go to state 60
    *               shift and go to state 61


state 92

    (47) expr -> expr MPLUS expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 47 (expr -> expr MPLUS expr .)
    EQ              reduce using rule 47 (expr -> expr MPLUS expr .)
    GEQ             reduce using rule 47 (expr -> expr MPLUS expr .)
    >               reduce using rule 47 (expr -> expr MPLUS expr .)
    LEQ             reduce using rule 47 (expr -> expr MPLUS expr .)
    <               reduce using rule 47 (expr -> expr MPLUS expr .)
    MMINUS          reduce using rule 47 (expr -> expr MPLUS expr .)
    MPLUS           reduce using rule 47 (expr -> expr MPLUS expr .)
    -               reduce using rule 47 (expr -> expr MPLUS expr .)
    +               reduce using rule 47 (expr -> expr MPLUS expr .)
    {               reduce using rule 47 (expr -> expr MPLUS expr .)
    FOR             reduce using rule 47 (expr -> expr MPLUS expr .)
    WHILE           reduce using rule 47 (expr -> expr MPLUS expr .)
    IF              reduce using rule 47 (expr -> expr MPLUS expr .)
    BREAK           reduce using rule 47 (expr -> expr MPLUS expr .)
    CONTINUE        reduce using rule 47 (expr -> expr MPLUS expr .)
    RETURN          reduce using rule 47 (expr -> expr MPLUS expr .)
    PRINT           reduce using rule 47 (expr -> expr MPLUS expr .)
    ID              reduce using rule 47 (expr -> expr MPLUS expr .)
    ;               reduce using rule 47 (expr -> expr MPLUS expr .)
    ,               reduce using rule 47 (expr -> expr MPLUS expr .)
    )               reduce using rule 47 (expr -> expr MPLUS expr .)
    :               reduce using rule 47 (expr -> expr MPLUS expr .)
    ]               reduce using rule 47 (expr -> expr MPLUS expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    /               shift and go to state 60
    *               shift and go to state 61


state 93

    (48) expr -> expr / expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 48 (expr -> expr / expr .)
    EQ              reduce using rule 48 (expr -> expr / expr .)
    GEQ             reduce using rule 48 (expr -> expr / expr .)
    >               reduce using rule 48 (expr -> expr / expr .)
    LEQ             reduce using rule 48 (expr -> expr / expr .)
    <               reduce using rule 48 (expr -> expr / expr .)
    MDIVIDE         reduce using rule 48 (expr -> expr / expr .)
    MTIMES          reduce using rule 48 (expr -> expr / expr .)
    MMINUS          reduce using rule 48 (expr -> expr / expr .)
    MPLUS           reduce using rule 48 (expr -> expr / expr .)
    /               reduce using rule 48 (expr -> expr / expr .)
    *               reduce using rule 48 (expr -> expr / expr .)
    -               reduce using rule 48 (expr -> expr / expr .)
    +               reduce using rule 48 (expr -> expr / expr .)
    {               reduce using rule 48 (expr -> expr / expr .)
    FOR             reduce using rule 48 (expr -> expr / expr .)
    WHILE           reduce using rule 48 (expr -> expr / expr .)
    IF              reduce using rule 48 (expr -> expr / expr .)
    BREAK           reduce using rule 48 (expr -> expr / expr .)
    CONTINUE        reduce using rule 48 (expr -> expr / expr .)
    RETURN          reduce using rule 48 (expr -> expr / expr .)
    PRINT           reduce using rule 48 (expr -> expr / expr .)
    ID              reduce using rule 48 (expr -> expr / expr .)
    ;               reduce using rule 48 (expr -> expr / expr .)
    ,               reduce using rule 48 (expr -> expr / expr .)
    )               reduce using rule 48 (expr -> expr / expr .)
    :               reduce using rule 48 (expr -> expr / expr .)
    ]               reduce using rule 48 (expr -> expr / expr .)
    '               shift and go to state 49


state 94

    (49) expr -> expr * expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 49 (expr -> expr * expr .)
    EQ              reduce using rule 49 (expr -> expr * expr .)
    GEQ             reduce using rule 49 (expr -> expr * expr .)
    >               reduce using rule 49 (expr -> expr * expr .)
    LEQ             reduce using rule 49 (expr -> expr * expr .)
    <               reduce using rule 49 (expr -> expr * expr .)
    MDIVIDE         reduce using rule 49 (expr -> expr * expr .)
    MTIMES          reduce using rule 49 (expr -> expr * expr .)
    MMINUS          reduce using rule 49 (expr -> expr * expr .)
    MPLUS           reduce using rule 49 (expr -> expr * expr .)
    /               reduce using rule 49 (expr -> expr * expr .)
    *               reduce using rule 49 (expr -> expr * expr .)
    -               reduce using rule 49 (expr -> expr * expr .)
    +               reduce using rule 49 (expr -> expr * expr .)
    {               reduce using rule 49 (expr -> expr * expr .)
    FOR             reduce using rule 49 (expr -> expr * expr .)
    WHILE           reduce using rule 49 (expr -> expr * expr .)
    IF              reduce using rule 49 (expr -> expr * expr .)
    BREAK           reduce using rule 49 (expr -> expr * expr .)
    CONTINUE        reduce using rule 49 (expr -> expr * expr .)
    RETURN          reduce using rule 49 (expr -> expr * expr .)
    PRINT           reduce using rule 49 (expr -> expr * expr .)
    ID              reduce using rule 49 (expr -> expr * expr .)
    ;               reduce using rule 49 (expr -> expr * expr .)
    ,               reduce using rule 49 (expr -> expr * expr .)
    )               reduce using rule 49 (expr -> expr * expr .)
    :               reduce using rule 49 (expr -> expr * expr .)
    ]               reduce using rule 49 (expr -> expr * expr .)
    '               shift and go to state 49


state 95

    (50) expr -> expr - expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 50 (expr -> expr - expr .)
    EQ              reduce using rule 50 (expr -> expr - expr .)
    GEQ             reduce using rule 50 (expr -> expr - expr .)
    >               reduce using rule 50 (expr -> expr - expr .)
    LEQ             reduce using rule 50 (expr -> expr - expr .)
    <               reduce using rule 50 (expr -> expr - expr .)
    MMINUS          reduce using rule 50 (expr -> expr - expr .)
    MPLUS           reduce using rule 50 (expr -> expr - expr .)
    -               reduce using rule 50 (expr -> expr - expr .)
    +               reduce using rule 50 (expr -> expr - expr .)
    {               reduce using rule 50 (expr -> expr - expr .)
    FOR             reduce using rule 50 (expr -> expr - expr .)
    WHILE           reduce using rule 50 (expr -> expr - expr .)
    IF              reduce using rule 50 (expr -> expr - expr .)
    BREAK           reduce using rule 50 (expr -> expr - expr .)
    CONTINUE        reduce using rule 50 (expr -> expr - expr .)
    RETURN          reduce using rule 50 (expr -> expr - expr .)
    PRINT           reduce using rule 50 (expr -> expr - expr .)
    ID              reduce using rule 50 (expr -> expr - expr .)
    ;               reduce using rule 50 (expr -> expr - expr .)
    ,               reduce using rule 50 (expr -> expr - expr .)
    )               reduce using rule 50 (expr -> expr - expr .)
    :               reduce using rule 50 (expr -> expr - expr .)
    ]               reduce using rule 50 (expr -> expr - expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    /               shift and go to state 60
    *               shift and go to state 61


state 96

    (51) expr -> expr + expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    NEQ             reduce using rule 51 (expr -> expr + expr .)
    EQ              reduce using rule 51 (expr -> expr + expr .)
    GEQ             reduce using rule 51 (expr -> expr + expr .)
    >               reduce using rule 51 (expr -> expr + expr .)
    LEQ             reduce using rule 51 (expr -> expr + expr .)
    <               reduce using rule 51 (expr -> expr + expr .)
    MMINUS          reduce using rule 51 (expr -> expr + expr .)
    MPLUS           reduce using rule 51 (expr -> expr + expr .)
    -               reduce using rule 51 (expr -> expr + expr .)
    +               reduce using rule 51 (expr -> expr + expr .)
    {               reduce using rule 51 (expr -> expr + expr .)
    FOR             reduce using rule 51 (expr -> expr + expr .)
    WHILE           reduce using rule 51 (expr -> expr + expr .)
    IF              reduce using rule 51 (expr -> expr + expr .)
    BREAK           reduce using rule 51 (expr -> expr + expr .)
    CONTINUE        reduce using rule 51 (expr -> expr + expr .)
    RETURN          reduce using rule 51 (expr -> expr + expr .)
    PRINT           reduce using rule 51 (expr -> expr + expr .)
    ID              reduce using rule 51 (expr -> expr + expr .)
    ;               reduce using rule 51 (expr -> expr + expr .)
    ,               reduce using rule 51 (expr -> expr + expr .)
    )               reduce using rule 51 (expr -> expr + expr .)
    :               reduce using rule 51 (expr -> expr + expr .)
    ]               reduce using rule 51 (expr -> expr + expr .)
    '               shift and go to state 49
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    /               shift and go to state 60
    *               shift and go to state 61


state 97

    (26) expr -> EYE ( expr . )
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    )               shift and go to state 108
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 98

    (35) expr -> ( expr ) .
    '               reduce using rule 35 (expr -> ( expr ) .)
    NEQ             reduce using rule 35 (expr -> ( expr ) .)
    EQ              reduce using rule 35 (expr -> ( expr ) .)
    GEQ             reduce using rule 35 (expr -> ( expr ) .)
    >               reduce using rule 35 (expr -> ( expr ) .)
    LEQ             reduce using rule 35 (expr -> ( expr ) .)
    <               reduce using rule 35 (expr -> ( expr ) .)
    MDIVIDE         reduce using rule 35 (expr -> ( expr ) .)
    MTIMES          reduce using rule 35 (expr -> ( expr ) .)
    MMINUS          reduce using rule 35 (expr -> ( expr ) .)
    MPLUS           reduce using rule 35 (expr -> ( expr ) .)
    /               reduce using rule 35 (expr -> ( expr ) .)
    *               reduce using rule 35 (expr -> ( expr ) .)
    -               reduce using rule 35 (expr -> ( expr ) .)
    +               reduce using rule 35 (expr -> ( expr ) .)
    {               reduce using rule 35 (expr -> ( expr ) .)
    FOR             reduce using rule 35 (expr -> ( expr ) .)
    WHILE           reduce using rule 35 (expr -> ( expr ) .)
    IF              reduce using rule 35 (expr -> ( expr ) .)
    BREAK           reduce using rule 35 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 35 (expr -> ( expr ) .)
    RETURN          reduce using rule 35 (expr -> ( expr ) .)
    PRINT           reduce using rule 35 (expr -> ( expr ) .)
    ID              reduce using rule 35 (expr -> ( expr ) .)
    ;               reduce using rule 35 (expr -> ( expr ) .)
    ,               reduce using rule 35 (expr -> ( expr ) .)
    )               reduce using rule 35 (expr -> ( expr ) .)
    :               reduce using rule 35 (expr -> ( expr ) .)
    ]               reduce using rule 35 (expr -> ( expr ) .)


state 99

    (27) expr -> ONES ( expr . )
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    )               shift and go to state 109
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 100

    (28) expr -> ZEROS ( expr . )
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    )               shift and go to state 110
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 101

    (55) outerlist -> [ values . ] , outerlist
    (56) outerlist -> [ values . ]
    ]               shift and go to state 111


state 102

    (29) expr -> [ outerlist ] .
    '               reduce using rule 29 (expr -> [ outerlist ] .)
    NEQ             reduce using rule 29 (expr -> [ outerlist ] .)
    EQ              reduce using rule 29 (expr -> [ outerlist ] .)
    GEQ             reduce using rule 29 (expr -> [ outerlist ] .)
    >               reduce using rule 29 (expr -> [ outerlist ] .)
    LEQ             reduce using rule 29 (expr -> [ outerlist ] .)
    <               reduce using rule 29 (expr -> [ outerlist ] .)
    MDIVIDE         reduce using rule 29 (expr -> [ outerlist ] .)
    MTIMES          reduce using rule 29 (expr -> [ outerlist ] .)
    MMINUS          reduce using rule 29 (expr -> [ outerlist ] .)
    MPLUS           reduce using rule 29 (expr -> [ outerlist ] .)
    /               reduce using rule 29 (expr -> [ outerlist ] .)
    *               reduce using rule 29 (expr -> [ outerlist ] .)
    -               reduce using rule 29 (expr -> [ outerlist ] .)
    +               reduce using rule 29 (expr -> [ outerlist ] .)
    {               reduce using rule 29 (expr -> [ outerlist ] .)
    FOR             reduce using rule 29 (expr -> [ outerlist ] .)
    WHILE           reduce using rule 29 (expr -> [ outerlist ] .)
    IF              reduce using rule 29 (expr -> [ outerlist ] .)
    BREAK           reduce using rule 29 (expr -> [ outerlist ] .)
    CONTINUE        reduce using rule 29 (expr -> [ outerlist ] .)
    RETURN          reduce using rule 29 (expr -> [ outerlist ] .)
    PRINT           reduce using rule 29 (expr -> [ outerlist ] .)
    ID              reduce using rule 29 (expr -> [ outerlist ] .)
    ;               reduce using rule 29 (expr -> [ outerlist ] .)
    ,               reduce using rule 29 (expr -> [ outerlist ] .)
    )               reduce using rule 29 (expr -> [ outerlist ] .)
    :               reduce using rule 29 (expr -> [ outerlist ] .)
    ]               reduce using rule 29 (expr -> [ outerlist ] .)


state 103

    (24) flow_control_statement -> IF expr block ELSE . block
    (3) block -> . { next_statements }
    (4) block -> . statement
    (7) statement -> . flow_control_statement
    (8) statement -> . action_statement ;
    (22) flow_control_statement -> . FOR ID = range block
    (23) flow_control_statement -> . WHILE expr block
    (24) flow_control_statement -> . IF expr block ELSE block
    (25) flow_control_statement -> . IF expr block
    (9) action_statement -> . BREAK
    (10) action_statement -> . CONTINUE
    (11) action_statement -> . RETURN expr
    (12) action_statement -> . PRINT values
    (13) action_statement -> . id_expr DASSIGN expr
    (14) action_statement -> . id_expr TASSIGN expr
    (15) action_statement -> . id_expr MASSIGN expr
    (16) action_statement -> . id_expr PASSIGN expr
    (17) action_statement -> . id_expr = expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    {               shift and go to state 3
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 8

    block                          shift and go to state 112
    statement                      shift and go to state 4
    flow_control_statement         shift and go to state 5
    action_statement               shift and go to state 6
    id_expr                        shift and go to state 15

state 104

    (20) values -> expr , values .
    ;               reduce using rule 20 (values -> expr , values .)
    ]               reduce using rule 20 (values -> expr , values .)


state 105

    (22) flow_control_statement -> FOR ID = range block .
    {               reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    FOR             reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    WHILE           reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    IF              reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    BREAK           reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    CONTINUE        reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    RETURN          reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    PRINT           reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    ID              reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    $end            reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    }               reduce using rule 22 (flow_control_statement -> FOR ID = range block .)
    ELSE            reduce using rule 22 (flow_control_statement -> FOR ID = range block .)


state 106

    (52) range -> expr : . expr
    (26) expr -> . EYE ( expr )
    (27) expr -> . ONES ( expr )
    (28) expr -> . ZEROS ( expr )
    (29) expr -> . [ outerlist ]
    (30) expr -> . id_expr
    (31) expr -> . STRING
    (32) expr -> . FLOAT
    (33) expr -> . INT
    (34) expr -> . expr '
    (35) expr -> . ( expr )
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr EQ expr
    (38) expr -> . expr GEQ expr
    (39) expr -> . expr > expr
    (40) expr -> . expr LEQ expr
    (41) expr -> . expr < expr
    (42) expr -> . ' expr
    (43) expr -> . - expr
    (44) expr -> . expr MDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr / expr
    (49) expr -> . expr * expr
    (50) expr -> . expr - expr
    (51) expr -> . expr + expr
    (53) id_expr -> . ID [ indexes ]
    (54) id_expr -> . ID
    EYE             shift and go to state 23
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    [               shift and go to state 27
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    INT             shift and go to state 31
    (               shift and go to state 24
    '               shift and go to state 32
    -               shift and go to state 33
    ID              shift and go to state 8

    expr                           shift and go to state 113
    id_expr                        shift and go to state 28

state 107

    (18) indexes -> INT , indexes .
    ]               reduce using rule 18 (indexes -> INT , indexes .)


state 108

    (26) expr -> EYE ( expr ) .
    '               reduce using rule 26 (expr -> EYE ( expr ) .)
    NEQ             reduce using rule 26 (expr -> EYE ( expr ) .)
    EQ              reduce using rule 26 (expr -> EYE ( expr ) .)
    GEQ             reduce using rule 26 (expr -> EYE ( expr ) .)
    >               reduce using rule 26 (expr -> EYE ( expr ) .)
    LEQ             reduce using rule 26 (expr -> EYE ( expr ) .)
    <               reduce using rule 26 (expr -> EYE ( expr ) .)
    MDIVIDE         reduce using rule 26 (expr -> EYE ( expr ) .)
    MTIMES          reduce using rule 26 (expr -> EYE ( expr ) .)
    MMINUS          reduce using rule 26 (expr -> EYE ( expr ) .)
    MPLUS           reduce using rule 26 (expr -> EYE ( expr ) .)
    /               reduce using rule 26 (expr -> EYE ( expr ) .)
    *               reduce using rule 26 (expr -> EYE ( expr ) .)
    -               reduce using rule 26 (expr -> EYE ( expr ) .)
    +               reduce using rule 26 (expr -> EYE ( expr ) .)
    {               reduce using rule 26 (expr -> EYE ( expr ) .)
    FOR             reduce using rule 26 (expr -> EYE ( expr ) .)
    WHILE           reduce using rule 26 (expr -> EYE ( expr ) .)
    IF              reduce using rule 26 (expr -> EYE ( expr ) .)
    BREAK           reduce using rule 26 (expr -> EYE ( expr ) .)
    CONTINUE        reduce using rule 26 (expr -> EYE ( expr ) .)
    RETURN          reduce using rule 26 (expr -> EYE ( expr ) .)
    PRINT           reduce using rule 26 (expr -> EYE ( expr ) .)
    ID              reduce using rule 26 (expr -> EYE ( expr ) .)
    ;               reduce using rule 26 (expr -> EYE ( expr ) .)
    ,               reduce using rule 26 (expr -> EYE ( expr ) .)
    )               reduce using rule 26 (expr -> EYE ( expr ) .)
    :               reduce using rule 26 (expr -> EYE ( expr ) .)
    ]               reduce using rule 26 (expr -> EYE ( expr ) .)


state 109

    (27) expr -> ONES ( expr ) .
    '               reduce using rule 27 (expr -> ONES ( expr ) .)
    NEQ             reduce using rule 27 (expr -> ONES ( expr ) .)
    EQ              reduce using rule 27 (expr -> ONES ( expr ) .)
    GEQ             reduce using rule 27 (expr -> ONES ( expr ) .)
    >               reduce using rule 27 (expr -> ONES ( expr ) .)
    LEQ             reduce using rule 27 (expr -> ONES ( expr ) .)
    <               reduce using rule 27 (expr -> ONES ( expr ) .)
    MDIVIDE         reduce using rule 27 (expr -> ONES ( expr ) .)
    MTIMES          reduce using rule 27 (expr -> ONES ( expr ) .)
    MMINUS          reduce using rule 27 (expr -> ONES ( expr ) .)
    MPLUS           reduce using rule 27 (expr -> ONES ( expr ) .)
    /               reduce using rule 27 (expr -> ONES ( expr ) .)
    *               reduce using rule 27 (expr -> ONES ( expr ) .)
    -               reduce using rule 27 (expr -> ONES ( expr ) .)
    +               reduce using rule 27 (expr -> ONES ( expr ) .)
    {               reduce using rule 27 (expr -> ONES ( expr ) .)
    FOR             reduce using rule 27 (expr -> ONES ( expr ) .)
    WHILE           reduce using rule 27 (expr -> ONES ( expr ) .)
    IF              reduce using rule 27 (expr -> ONES ( expr ) .)
    BREAK           reduce using rule 27 (expr -> ONES ( expr ) .)
    CONTINUE        reduce using rule 27 (expr -> ONES ( expr ) .)
    RETURN          reduce using rule 27 (expr -> ONES ( expr ) .)
    PRINT           reduce using rule 27 (expr -> ONES ( expr ) .)
    ID              reduce using rule 27 (expr -> ONES ( expr ) .)
    ;               reduce using rule 27 (expr -> ONES ( expr ) .)
    ,               reduce using rule 27 (expr -> ONES ( expr ) .)
    )               reduce using rule 27 (expr -> ONES ( expr ) .)
    :               reduce using rule 27 (expr -> ONES ( expr ) .)
    ]               reduce using rule 27 (expr -> ONES ( expr ) .)


state 110

    (28) expr -> ZEROS ( expr ) .
    '               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    NEQ             reduce using rule 28 (expr -> ZEROS ( expr ) .)
    EQ              reduce using rule 28 (expr -> ZEROS ( expr ) .)
    GEQ             reduce using rule 28 (expr -> ZEROS ( expr ) .)
    >               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    LEQ             reduce using rule 28 (expr -> ZEROS ( expr ) .)
    <               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    MDIVIDE         reduce using rule 28 (expr -> ZEROS ( expr ) .)
    MTIMES          reduce using rule 28 (expr -> ZEROS ( expr ) .)
    MMINUS          reduce using rule 28 (expr -> ZEROS ( expr ) .)
    MPLUS           reduce using rule 28 (expr -> ZEROS ( expr ) .)
    /               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    *               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    -               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    +               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    {               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    FOR             reduce using rule 28 (expr -> ZEROS ( expr ) .)
    WHILE           reduce using rule 28 (expr -> ZEROS ( expr ) .)
    IF              reduce using rule 28 (expr -> ZEROS ( expr ) .)
    BREAK           reduce using rule 28 (expr -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 28 (expr -> ZEROS ( expr ) .)
    RETURN          reduce using rule 28 (expr -> ZEROS ( expr ) .)
    PRINT           reduce using rule 28 (expr -> ZEROS ( expr ) .)
    ID              reduce using rule 28 (expr -> ZEROS ( expr ) .)
    ;               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    ,               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    )               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    :               reduce using rule 28 (expr -> ZEROS ( expr ) .)
    ]               reduce using rule 28 (expr -> ZEROS ( expr ) .)


state 111

    (55) outerlist -> [ values ] . , outerlist
    (56) outerlist -> [ values ] .
    ,               shift and go to state 114
    ]               reduce using rule 56 (outerlist -> [ values ] .)


state 112

    (24) flow_control_statement -> IF expr block ELSE block .
    {               reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    FOR             reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    WHILE           reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    IF              reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    BREAK           reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    CONTINUE        reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    RETURN          reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    PRINT           reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    ID              reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    $end            reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    }               reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)
    ELSE            reduce using rule 24 (flow_control_statement -> IF expr block ELSE block .)


state 113

    (52) range -> expr : expr .
    (34) expr -> expr . '
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . EQ expr
    (38) expr -> expr . GEQ expr
    (39) expr -> expr . > expr
    (40) expr -> expr . LEQ expr
    (41) expr -> expr . < expr
    (44) expr -> expr . MDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . / expr
    (49) expr -> expr . * expr
    (50) expr -> expr . - expr
    (51) expr -> expr . + expr
    {               reduce using rule 52 (range -> expr : expr .)
    FOR             reduce using rule 52 (range -> expr : expr .)
    WHILE           reduce using rule 52 (range -> expr : expr .)
    IF              reduce using rule 52 (range -> expr : expr .)
    BREAK           reduce using rule 52 (range -> expr : expr .)
    CONTINUE        reduce using rule 52 (range -> expr : expr .)
    RETURN          reduce using rule 52 (range -> expr : expr .)
    PRINT           reduce using rule 52 (range -> expr : expr .)
    ID              reduce using rule 52 (range -> expr : expr .)
    '               shift and go to state 49
    NEQ             shift and go to state 50
    EQ              shift and go to state 51
    GEQ             shift and go to state 52
    >               shift and go to state 53
    LEQ             shift and go to state 54
    <               shift and go to state 55
    MDIVIDE         shift and go to state 56
    MTIMES          shift and go to state 57
    MMINUS          shift and go to state 58
    MPLUS           shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 114

    (55) outerlist -> [ values ] , . outerlist
    (55) outerlist -> . [ values ] , outerlist
    (56) outerlist -> . [ values ]
    [               shift and go to state 68

    outerlist                      shift and go to state 115

state 115

    (55) outerlist -> [ values ] , outerlist .
    ]               reduce using rule 55 (outerlist -> [ values ] , outerlist .)
